import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import Navbar from '../components/Navbar'
import dynamic from 'next/dynamic'
import { Grid, FormControl, InputLabel, NativeSelect } from '@material-ui/core'

const Map = dynamic(import('../components/Map.js'), {
  ssr: false
})


export default function Covid() {
  const router = useRouter()
  const [provinces, setProvices] = useState([])
  const [selectedProvince, setSelectedProvince] = useState('')
  const [cities, setCities] = useState([])
  const [selectedCity, setSelectedCity] = useState('')
  const [isLoadingCities, setIsLoadingCities] = useState(false)
  const [hospitals, setHospitals] = useState([])
  const [selectedHospital, setSelectedHospital] = useState({})
  const [mapCenter, setMapCenter] = useState([0.3737, 127.1902])

  useEffect(async () => {
    try {
      const res = await fetch('https://rs-bed-covid-api.vercel.app/api/get-provinces', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      const data = await res.json()
      setProvices(data.provinces)
    } catch (error) {
      console.log(error)
    }
  }, [])

  const handleChangeProvince = (event) => {
    setCities([])
    setSelectedProvince(event.target.value)
  }

  const handleChangeCity = (event) => {
    setHospitals([])
    setSelectedCity(event.target.value)
  }

  useEffect(async () => {
    try {
      if (!selectedProvince) {
        setCities([])
        setSelectedCity('')
        return
      }
      const res = await fetch(`https://rs-bed-covid-api.vercel.app/api/get-cities?provinceid=${selectedProvince}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      const data = await res.json()
      setCities(data.cities)
    } catch (error) {
      console.log(error)
    }
  }, [selectedProvince])

  useEffect(async () => {
    try {
      if (!selectedCity) {
        setHospitals([])
        setSelectedHospital({})
        return
      }
      const res = await fetch(`https://rs-bed-covid-api.vercel.app/api/get-hospitals?provinceid=${selectedProvince}&cityid=${selectedCity}&type=1`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      const data = await res.json()
      const _hospitals = []
      for (let i = 0; i < data.hospitals.length; i++) {
        const rs = await fetch(`https://rs-bed-covid-api.vercel.app/api/get-hospital-map?hospitalid=${data.hospitals[i].id}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        })
        const _data = await rs.json()
        if (i === 0) setMapCenter([Number( _data.data.lat), Number(_data.data.long)])
        _hospitals.push({ ...data.hospitals[i], lat: _data.data.lat, long: _data.data.long })
      }
      console.log(_hospitals)
      setHospitals(_hospitals)
    } catch (error) {
      console.log(error)
    }
  }, [selectedCity])

  return (
    <div>
      <Head>
        <title>Jakarta Hospital Data</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/Hospital.svg" />
      </Head>

      <main className='main-container'>
        <Navbar />
        <Grid container className='primal-container'>
          <select
            value={selectedProvince}
            onChange={handleChangeProvince}
            className='region-selection rokkit'
          >
            <option value={''} className='select-option'>Pilih Provinsi</option>
            {
              provinces.length && provinces.map(e => {

                return (
                  <React.Fragment key={e.id}>
                    <option value={e.id} className='select-option'>{ e.name }</option>
                  </React.Fragment>
                )
              }) 
            }
          </select>
          <select
            value={selectedCity}
            onChange={handleChangeCity}
            className='region-selection rokkit'
            disabled={ cities.length ? false : true }
          >
            <option value={''} className='select-option'>Pilih Kota atau Kabupaten</option>
            {
              cities.length && cities.map(e => {

                return (
                  <React.Fragment key={e.id}>
                    <option value={ e.id } className='select-option'>{ e.name }</option>
                  </React.Fragment>
                )
              })
            }
          </select>
        </Grid>
        <Map data={hospitals} centerPosition={mapCenter} />
      </main>
    </div>
  )
}
